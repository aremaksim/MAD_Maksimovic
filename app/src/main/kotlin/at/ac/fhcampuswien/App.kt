/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

import java.lang.IllegalArgumentException

class App {
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        println("Let's play the Number Guessing Game!")
        val genNumber = generateRandomNonRepeatingNumber(digitsToGuess)
        var attemptsCounter = 0

        while (true) {
            println("Enter a number!              The generated Number is: $genNumber")
            val userInput = readlnOrNull()?.toIntOrNull()

            if (userInput != null) {
                val compareResult = checkUserInputAgainstGeneratedNumber(userInput, genNumber)
                println(compareResult)

                if (compareResult.n == digitsToGuess) {
                    println("Congratulations! Your answer is correct. You've had $attemptsCounter attempts. ")
                    break
                }
            } else {
                println("Invalid input. Please type a valid number from 1 to 9. ")
            }
            attemptsCounter++
        }
    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        if (length < 1 || length > 9) {
            throw IllegalArgumentException("Length must be between 1 and 9.")
        }
        val digits = mutableListOf<Int>()
        for (i in 1..9) {
            digits.add(i)
        }
        digits.shuffle()
        var result = 0
        for (i in 0 until length) {
            result = result * 10 + digits[i]
        }
        result
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `m`: The number of digits guessed correctly (regardless of their position).
     *         2. `n`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        val inputDigits = input.toString().toCharArray().map { it.toString().toInt() }
        val generatedDigits = generatedNumber.toString().toCharArray().map { it.toString().toInt() }

        require(inputDigits.size == generatedDigits.size) { "Input and generated Numbers must have same length. " }

        val matchedDigits = mutableSetOf<Int>()
        val m = inputDigits.count { it in generatedDigits && matchedDigits.add(it) }
        val n = inputDigits.withIndex().count { (index, digit) -> digit == generatedDigits[index] && matchedDigits.contains(digit) }

        CompareResult(m,n)   // return value is a placeholder
    }
}

fun main() {
    val app = App()
    app.playNumberGame()
}
